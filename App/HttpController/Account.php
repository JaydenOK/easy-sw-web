<?php

namespace App\HttpController;

use App\Model\AmazonAccount;
use EasySwoole\Http\AbstractInterface\Controller;
use EasySwoole\Mysqli\QueryBuilder;
use EasySwoole\ORM\DbManager;
use EasySwoole\ORM\Exception\Exception;
use EasySwoole\Pool\Exception\PoolEmpty;

class Account extends Controller
{

    //http-server on request 回调函数环境方法-协程环境，可以直接使用协程api
    public function lists()
    {
        // 获取 get 参数
        $platformCode = $this->request()->getQueryParam('platform_code');
        // 多个主键
        $lists = AmazonAccount::create()->limit(20)->all();
        $data = json_encode($lists, JSON_UNESCAPED_UNICODE);
        // 返回给客户端
        $this->response()->write($data . PHP_EOL);
        return;
    }

    //http://192.168.92.208:9511/Account/mysqlPoolTest
    //使用mysql连接池
    public function mysqlPoolTest()
    {
        $platformCode = $this->request()->getQueryParam('platform_code');
        // 获取连接池
        $connection = DbManager::getInstance()->getConnection('main');
        //defer($timeout)参数为空 默认获取config的timeout，此方法会自动回收对象，用户无需关心。
        $timeout = null;
        //即 createObject()对象
        /**
         * @var  $mysqlClient \EasySwoole\ORM\Db\MysqliClient
         */
        $mysqlClient = $connection->defer($timeout);
        try {
            $builder = $mysqlClient->queryBuilder()
                ->where('account_status', 10)
                ->limit(20)
                ->get('yibai_amazon_account');
            // 返回给客户端
            //var_dump($builder->getLastQuery());
            $result = $mysqlClient->execBuilder();
            $this->response()->write(json_encode($result, JSON_UNESCAPED_UNICODE));
        } catch (Exception $e) {
        } catch (\Throwable $e) {
        }
        return;
    }

    public function mysqlPoolTransaction()
    {
        try {
            \EasySwoole\ORM\DbManager::getInstance()->startTransaction();
            \EasySwoole\ORM\DbManager::getInstance()->commit();
            \EasySwoole\ORM\DbManager::getInstance()->rollback();
        } catch (Exception $e) {
        } catch (PoolEmpty $e) {
        } catch (\Throwable $e) {
        }
    }

    //使用invoke方式，让ORM查询结束后马上归还资源，可以提高资源的利用率。
    public function mysqlPoolInvoke()
    {
        \EasySwoole\ORM\DbManager::getInstance()->invoke(function (\EasySwoole\ORM\Db\ClientInterface $client) {

            \EasySwoole\ORM\DbManager::getInstance()->startTransaction($client);
            \EasySwoole\ORM\DbManager::getInstance()->commit($client);
            \EasySwoole\ORM\DbManager::getInstance()->rollback($client);

            //查询该连接是否处于事务上下文
            /** @var \EasySwoole\ORM\Db\ClientInterface $client * */
            \EasySwoole\ORM\DbManager::isInTransaction($client);
        });


    }

    //http://192.168.92.208:9511/Account/redisPoolTest
    //使用redis连接池
    public function redisPoolTest()
    {
        // 取出连接池管理对象，然后获取连接对象（getObject）
        $redis = \EasySwoole\Pool\Manager::getInstance()->get('redis')->getObj();
        $key = 'test_username';
        $redis->set($key, '仙士可123abc');
        $data = $redis->get($key);
        // 回收连接对象（将连接对象重新归还到连接池，方便后续使用）
        \EasySwoole\Pool\Manager::getInstance()->get('redis')->recycleObj($redis);

        // 释放连接对象（将连接对象直接彻底释放，后续不再使用）
        // \EasySwoole\Pool\Manager::getInstance()->get('redis1')->unsetObj($redis1);

        $this->response()->write($data . PHP_EOL);
    }


    public function test()
    {
        go(function () {
            $redisPool = new \App\Pool\RedisPool(new \EasySwoole\Pool\Config(), new \EasySwoole\Redis\Config\RedisConfig(\EasySwoole\EasySwoole\Config::getInstance()->getConf('REDIS')));
            $redis = $redisPool->getObj();
            var_dump($redis->echo('仙士可'));
            $redisPool->recycleObj($redis);
        });
    }


    /**
     * 此控制器抛异常时会执行此方法
     *
     * @param \Throwable $throwable
     * @throws \Throwable
     * CreateTime: 2020/8/19 12:48 上午
     */
    public function onException(\Throwable $throwable): void
    {
        parent::onException($throwable); // TODO: Change the autogenerated stub
    }

    /**
     * gc 方法将在执行完 afterAction 方法之后自动调用，可自行覆盖实现其他的 gc 回收逻辑
     *
     * CreateTime: 2020/8/19 12:52 上午
     */
    public function gc()
    {
        parent::gc(); // TODO: Change the autogenerated stub
    }

    /**
     * 当控制器方法执行结束之后将调用该方法，可自行覆盖该方法实现数据回收等逻辑
     *
     * @param string|null $actionName
     * CreateTime: 2020/8/19 12:51 上午
     */
    public function afterAction(?string $actionName): void
    {
        parent::afterAction($actionName); // TODO: Change the autogenerated stub
    }

    /**
     * 当请求方法未找到时，自动调用该方法，可自行覆盖该方法实现自己的逻辑
     *
     * @param string|null $action
     * CreateTime: 2020/8/19 12:51 上午
     */
    public function actionNotFound(?string $action)
    {
        parent::actionNotFound($action); // TODO: Change the autogenerated stub
    }

    /**
     * 所有控制器请求都会先经过该方法，如果此方法返回 false 则请求不继续往下执行，可用于权限验证
     *
     * @param string|null $action
     * @return bool|null
     * CreateTime: 2020/8/19 12:52 上午
     */
    public function onRequest(?string $action): ?bool
    {
        return parent::onRequest($action); // TODO: Change the autogenerated stub
    }

}